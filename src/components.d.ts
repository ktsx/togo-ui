/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ButtonSize,
  ButtonTheme,
} from './components/button/button.types';

export namespace Components {
  interface TgButton {
    /**
    * Sets disabled status
    */
    'isDisabled': boolean;
    /**
    * Sets button size
    */
    'size': ButtonSize;
    /**
    * Sets the theme
    */
    'theme': ButtonTheme;
  }
  interface TgRippleEffect {
    /**
    * Adds the ripple effect to the parent element.
    */
    'addRipple': (x: number, y: number) => Promise<() => void>;
    /**
    * Sets the type of ripple-effect:  - `bounded`: the ripple effect expands from the user's click position - `unbounded`: the ripple effect expands from the center of the button and overflows the container.  NOTE: Surfaces for bounded ripples should have the overflow property set to hidden, while surfaces for unbounded ripples should have it set to visible.
    */
    'type': "bounded" | "unbounded";
  }
}

declare global {


  interface HTMLTgButtonElement extends Components.TgButton, HTMLStencilElement {}
  var HTMLTgButtonElement: {
    prototype: HTMLTgButtonElement;
    new (): HTMLTgButtonElement;
  };

  interface HTMLTgRippleEffectElement extends Components.TgRippleEffect, HTMLStencilElement {}
  var HTMLTgRippleEffectElement: {
    prototype: HTMLTgRippleEffectElement;
    new (): HTMLTgRippleEffectElement;
  };
  interface HTMLElementTagNameMap {
    'tg-button': HTMLTgButtonElement;
    'tg-ripple-effect': HTMLTgRippleEffectElement;
  }
}

declare namespace LocalJSX {
  interface TgButton extends JSXBase.HTMLAttributes<HTMLTgButtonElement> {
    /**
    * Sets disabled status
    */
    'isDisabled'?: boolean;
    /**
    * Emitted when the button was clicked.
    */
    'onTgClick'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the button is focused.
    */
    'onTgFocus'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the mouse is over the button.
    */
    'onTgHover'?: (event: CustomEvent<any>) => void;
    /**
    * Sets button size
    */
    'size'?: ButtonSize;
    /**
    * Sets the theme
    */
    'theme'?: ButtonTheme;
  }
  interface TgRippleEffect extends JSXBase.HTMLAttributes<HTMLTgRippleEffectElement> {
    /**
    * Sets the type of ripple-effect:  - `bounded`: the ripple effect expands from the user's click position - `unbounded`: the ripple effect expands from the center of the button and overflows the container.  NOTE: Surfaces for bounded ripples should have the overflow property set to hidden, while surfaces for unbounded ripples should have it set to visible.
    */
    'type'?: "bounded" | "unbounded";
  }

  interface IntrinsicElements {
    'tg-button': TgButton;
    'tg-ripple-effect': TgRippleEffect;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


